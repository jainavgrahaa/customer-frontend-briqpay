
// reset list
@mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;
}

@mixin common-transition {
    transition: all 0.3s ease;
}

@mixin flex-center-v-h {
    display: flex;
    justify-content: center;
    align-items: center;
}

@mixin flex-center-v {
    display: flex;
    align-items: center;
}

/* Media Mixins */
@mixin for-phone-only {
    @media (max-width: 599px) { @content; }
}
@mixin for-phone {
  @media (max-width: 767px) { @content; }
}
@mixin for-tablet-portrait {
    @media (min-width: 600px) { @content; }
}
@mixin for-tablet-landscape {
    @media (min-width: 900px) { @content; }
}
@mixin for-tablet-landscape-3 {
  @media (min-width: 992px) { @content; }
}
@mixin for-tablet-landscape-2{
    @media (max-width: 992px) { @content; }
}
@mixin for-desktop {
    @media (min-width: 1200px) { @content; }
}
@mixin for-tablet-laptop {
  @media (min-width: 600px) and (max-width: 1199px ) { @content; }
}
@mixin for-desktop-2 {
    @media (max-width: 1200px) {@content;}
}

@mixin for-big-desktop {
    @media (min-width: 1800px) { @content; }
}
@mixin themeStyles($theme) {
  body[data-theme="#{$theme}"] & {
    @content;
  }
}
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 599px,
  sm: 768px,
  md: 992px,
  lg: 1200px
);

//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––


// @include respond-above(sm) {} //Usage in SCSS file only
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {} //Usage in SCSS file only
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {} //Usage in SCSS file only
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

//heading design

@mixin hfont($fsize,$fweight,$ffamily,$lineHeight){
  font-size: $fsize;
  font-family: $ffamily;
  line-height: $lineHeight;
  font-weight: $fweight;
}
// Font Face
@mixin font-face($font-family, $file-name, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: $font-family;
    src: url('../font/Ivy-Mode/#{$file-name}.eot');
    src: url('../font/Ivy-Mode/#{$file-name}.eot?#iefix') format('embedded-opentype'),
         url('../font/Ivy-Mode/#{$file-name}.woff2') format('woff2'),
         url('../font/Ivy-Mode/#{$file-name}.woff') format('woff'),
         url('../font/Ivy-Mode/#{$file-name}.ttf') format('truetype');
    font-weight: $font-weight;
    font-style: $font-style;
    font-display: swap;
  }
}